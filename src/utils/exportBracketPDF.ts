
import jsPDF, { GState } from 'jspdf';
import { toPng } from 'html-to-image';

// =================================================================================================
// 1. TYPES & CONFIGURATION
// =================================================================================================

interface Participant {
  name: string;
  dojo: string;
  id: number;
}

interface MatchData {
  id: number;
  round: number;
  participant1?: Participant;
  participant2?: Participant;
  score1: number;
  score2: number;
  nomorPartai?: string;
  tanggal?: string;
  isBye?: boolean;
}

interface LeaderboardData {
  first: Participant | null;
  second: Participant | null;
  third: Participant[];
}

interface ExportConfig {
  eventName: string;
  categoryName: string;
  location: string;
  dateRange: string;
  totalParticipants: number;
  matches: MatchData[];
  leaderboard: LeaderboardData | null;
  totalRounds: number;
  isPemula?: boolean;
  logoUrl?: string;
}

// =================================================================================================
// 2. LAYOUT & THEME CONSTANTS
// =================================================================================================

const PAGE_WIDTH = 297;
const PAGE_HEIGHT = 210;

// Margins
const MARGIN_TOP = 15;
const MARGIN_BOTTOM = 15;
const MARGIN_LEFT = 20;
const MARGIN_RIGHT = 20;

// Layout Heights
const HEADER_HEIGHT = 18;
const FOOTER_HEIGHT = 10;

// Content Area Dimensions
const CONTENT_WIDTH = PAGE_WIDTH - MARGIN_LEFT - MARGIN_RIGHT;
const CONTENT_HEIGHT = PAGE_HEIGHT - MARGIN_TOP - MARGIN_BOTTOM - HEADER_HEIGHT - FOOTER_HEIGHT;

const THEME = {
  primary: '#990D35',   // Maroon
  secondary: '#F5B700', // Gold
  background: '#F5FBEF', // Soft Beige/Green
  text: '#050505',       // Almost Black
  textSecondary: '#6B7280', // Gray
  border: '#E5E7EB',     // Light Gray
  white: '#FFFFFF',
};

// =================================================================================================
// 3. PDF HELPER: HEADER, FOOTER & WATERMARK
// =================================================================================================

const addHeaderAndFooter = (
  doc: jsPDF,
  config: ExportConfig,
  pageNumber: number,
  totalPages: number
) => {
  // === WATERMARK ===
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(80);
  doc.setTextColor('#000000');
  doc.text('SIGAP SYSTEM', PAGE_WIDTH / 2, PAGE_HEIGHT / 2 + 20, {
    align: 'center',
    angle: 45,
    opacity: 0.05,
  });

  // === HEADER ===
  if (config.logoUrl) {
    try {
      doc.addImage(config.logoUrl, 'PNG', MARGIN_LEFT, MARGIN_TOP - 5, 12, 12);
    } catch {
      // Fails silently if logo is invalid
    }
  }

  doc.setFont('helvetica', 'bold');
  doc.setFontSize(13);
  doc.setTextColor(THEME.text);
  doc.text(config.eventName, PAGE_WIDTH / 2, MARGIN_TOP + 5, { align: 'center' });

  doc.setFont('helvetica', 'normal');
  doc.setFontSize(10);
  doc.setTextColor(THEME.textSecondary);
  doc.text(config.categoryName, PAGE_WIDTH / 2, MARGIN_TOP + 11, { align: 'center' });

  // === FOOTER ===
  const footerY = PAGE_HEIGHT - MARGIN_BOTTOM;
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(8);
  doc.setTextColor(THEME.textSecondary);

  // Left: Date
  const exportDate = new Date().toLocaleDateString('id-ID', {
    day: '2-digit',
    month: 'long',
    year: 'numeric',
  });
  doc.text(exportDate, MARGIN_LEFT, footerY);

  // Center: Page Number
  doc.text(`Page ${pageNumber} of ${totalPages}`, PAGE_WIDTH / 2, footerY, { align: 'center' });

  // Right: Watermark
  doc.text('Generated by SIGAP System', PAGE_WIDTH - MARGIN_RIGHT, footerY, { align: 'right' });
};

// =================================================================================================
// 4. PDF HELPER: COVER PAGE
// =================================================================================================

const addCoverPage = (doc: jsPDF, config: ExportConfig, totalPages: number) => {
  // Background
  doc.setFillColor(THEME.background);
  doc.rect(0, 0, PAGE_WIDTH, PAGE_HEIGHT, 'F');

  // Header Banner with Gradient
  const gradient = (doc.internal as any).createLinearGradient(0, 0, PAGE_WIDTH, 40);
  gradient.addColorStop(0, THEME.primary);
  gradient.addColorStop(1, THEME.secondary);
  doc.setFillColor(gradient);
  doc.rect(0, 0, PAGE_WIDTH, 40, 'F');

  // Titles
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(32);
  doc.setTextColor(THEME.white);
  doc.text(config.eventName.toUpperCase(), PAGE_WIDTH / 2, 25, { align: 'center' });

  doc.setFont('helvetica', 'normal');
  doc.setFontSize(16);
  doc.setTextColor(THEME.white);
  doc.text(config.categoryName, PAGE_WIDTH / 2, 35, { align: 'center' });

  // Info Box
  const boxX = PAGE_WIDTH / 2 - 100;
  const boxY = 70;
  const boxWidth = 200;
  const boxHeight = 60;
  
  // Manual Shadow
  doc.setFillColor(THEME.border);
  doc.roundedRect(boxX + 1, boxY + 1, boxWidth, boxHeight, 5, 5, 'F');

  doc.setDrawColor(THEME.border);
  doc.setFillColor(THEME.white);
  doc.roundedRect(boxX, boxY, boxWidth, boxHeight, 5, 5, 'FD');

  // Info Text
  const infoItems = [
    { label: 'Location', value: config.location },
    { label: 'Date', value: config.dateRange },
    { label: 'Participants', value: `${config.totalParticipants} Athletes` },
    { label: 'Matches', value: `${config.matches.length} Matches` },
  ];
  
  let currentY = boxY + 15;
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(10);
  infoItems.forEach(item => {
    doc.setTextColor(THEME.textSecondary);
    doc.text(item.label, boxX + 15, currentY, { align: 'left' });
    doc.setTextColor(THEME.text);
    doc.text(item.value, boxX + boxWidth - 15, currentY, { align: 'right' });
    currentY += 10;
  });

  // Watermark Logo
  if (config.logoUrl) {
    try {
      doc.setGState(new (doc as any).GState({ opacity: 0.2 }));
      doc.addImage(config.logoUrl, 'PNG', PAGE_WIDTH - 60, PAGE_HEIGHT - 50, 40, 40);
      doc.setGState(new (doc as any).GState({ opacity: 1 }));
    } catch {}
  }
  
  addHeaderAndFooter(doc, config, 1, totalPages);
};

// =================================================================================================
// 5. PDF HELPER: DOM-TO-IMAGE CONVERSION
// =================================================================================================

const convertElementToImage = async (element: HTMLElement) => {
  // Temporarily add a white background to the parent to ensure the generated PNG is clean
  const originalBg = element.style.backgroundColor;
  element.style.backgroundColor = THEME.white;

  const dataUrl = await toPng(element, {
    quality: 1,
    pixelRatio: 2.5,
    cacheBust: true,
    backgroundColor: THEME.white,
    style: {
      transform: 'scale(1)',
      transformOrigin: 'top left',
      fontFamily: "'Poppins', 'Helvetica Neue', sans-serif",
      WebkitFontSmoothing: 'antialiased',
    } as any,
  });

  // Restore original background
  element.style.backgroundColor = originalBg;

  const img = new Image();
  img.src = dataUrl;
  await new Promise(resolve => (img.onload = resolve));
  return img;
};

// =================================================================================================
// 6. PDF HELPER: ADD IMAGE CONTENT TO PAGE
// =================================================================================================

const addImageToPage = (
  doc: jsPDF,
  img: HTMLImageElement,
  pageTitle: string,
  config: ExportConfig,
  pageNumber: number,
  totalPages: number
) => {
  const imgWidth = CONTENT_WIDTH;
  const imgHeight = (img.height * imgWidth) / img.width;
  const totalImgPages = Math.ceil(imgHeight / CONTENT_HEIGHT);

  let heightLeft = imgHeight;
  let position = 0;

  for (let i = 0; i < totalImgPages; i++) {
    const currentPage = pageNumber + i;
    if (i > 0) doc.addPage();

    doc.setFillColor(THEME.background);
    doc.rect(0, 0, PAGE_WIDTH, PAGE_HEIGHT, 'F');

    addHeaderAndFooter(doc, config, currentPage, totalPages);

    // Page Title
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(12);
    doc.setTextColor(THEME.primary);
    doc.text(pageTitle, MARGIN_LEFT, MARGIN_TOP + HEADER_HEIGHT + 5);

    const y = MARGIN_TOP + HEADER_HEIGHT + 10 - position;
    doc.addImage(img, 'PNG', MARGIN_LEFT, y, imgWidth, imgHeight);
    
    heightLeft -= CONTENT_HEIGHT;
    position += CONTENT_HEIGHT;
  }
  return totalImgPages;
};

// =================================================================================================
// 7. MAIN EXPORT FUNCTION
// =================================================================================================

export const exportBracketToPDF = async (
  config: ExportConfig,
  bracketElement: HTMLElement,
  leaderboardElement?: HTMLElement
): Promise<void> => {
  try {
    const doc = new jsPDF({
      orientation: 'landscape',
      unit: 'mm',
      format: 'a4',
      compress: true,
    });
    doc.deletePage(1); // Remove default blank page

    // --- PRE-CALCULATION & PREPARATION ---
    let totalPages = 1; // Start with cover page
    let bracketPages = 0;
    let leaderboardPages = 0;
    let bracketImg: HTMLImageElement | null = null;
    let leaderboardImg: HTMLImageElement | null = null;

    if (bracketElement) {
      const img = await convertElementToImage(bracketElement);
      bracketPages = Math.ceil(((img.height * CONTENT_WIDTH) / img.width) / CONTENT_HEIGHT);
      bracketImg = img;
    }
    if (leaderboardElement) {
      const img = await convertElementToImage(leaderboardElement);
      leaderboardPages = Math.ceil(((img.height * CONTENT_WIDTH) / img.width) / CONTENT_HEIGHT);
      leaderboardImg = img;
    }
    totalPages += bracketPages + leaderboardPages;

    // --- PAGE GENERATION ---
    let currentPageNumber = 0;

    // Page 1: Cover
    doc.addPage();
    currentPageNumber++;
    addCoverPage(doc, config, totalPages);

    // Pages 2...: Bracket
    if (bracketImg) {
      doc.addPage();
      currentPageNumber++;
      const pagesAdded = addImageToPage(doc, bracketImg, 'Competition Bracket', config, currentPageNumber, totalPages);
      currentPageNumber += pagesAdded - 1;
    }

    // Pages N...: Leaderboard
    if (leaderboardImg) {
      doc.addPage();
      currentPageNumber++;
      const pagesAdded = addImageToPage(doc, leaderboardImg, 'Leaderboard & Results', config, currentPageNumber, totalPages);
      currentPageNumber += pagesAdded - 1;
    }

    // --- SAVE PDF ---
    const sanitizedEventName = config.eventName.replace(/[^a-z0-9]/gi, '_').toLowerCase();
    const filename = `Bracket_${sanitizedEventName}_${config.categoryName.replace(/ /g, '_')}.pdf`;
    doc.save(filename);

  } catch (error) {
    console.error('Error generating PDF:', error);
    alert('Failed to generate PDF. Please check the console for more details.');
  }
};

// =================================================================================================
// 8. DATA TRANSFORM HELPER (Unchanged)
// =================================================================================================

export const transformBracketDataForPDF = (
  kelasData: any,
  matches: any[],
  leaderboard: any,
  isPemula: boolean = false
): ExportConfig => {
  const transformedMatches: MatchData[] = matches.map(match => ({
    id: match.id_match,
    round: match.ronde,
    participant1: match.peserta_a ? {
      name: match.peserta_a.is_team
        ? match.peserta_a.anggota_tim?.map((t: any) => t.atlet.nama_atlet).join(', ') || 'Team'
        : match.peserta_a.atlet?.nama_atlet || '',
      dojo: match.peserta_a.atlet?.dojang.nama_dojang || '',
      id: match.peserta_a.id_peserta_kompetisi
    } : undefined,
    participant2: match.peserta_b ? {
      name: match.peserta_b.is_team
        ? match.peserta_b.anggota_tim?.map((t: any) => t.atlet.nama_atlet).join(', ') || 'Team'
        : match.peserta_b.atlet?.nama_atlet || '',
      dojo: match.peserta_b.atlet?.dojang.nama_dojang || '',
      id: match.peserta_b.id_peserta_kompetisi
    } : undefined,
    score1: match.skor_a || 0,
    score2: match.skor_b || 0,
    nomorPartai: match.nomor_partai,
    tanggal: match.tanggal_pertandingan,
    isBye: !match.peserta_b && match.ronde === 1
  }));

  const categoryName = `${kelasData.kelompok?.nama_kelompok || ''} ${
    kelasData.kelas_berat?.jenis_kelamin === 'LAKI_LAKI' ? 'Male' : 'Female'
  } ${kelasData.kelas_berat?.nama_kelas || kelasData.poomsae?.nama_kelas || ''}`.trim();

  const dateRange = `${new Date(kelasData.kompetisi.tanggal_mulai).toLocaleDateString('id-ID', {
    day: 'numeric',
    month: 'long',
    year: 'numeric'
  })} - ${new Date(kelasData.kompetisi.tanggal_selesai).toLocaleDateString('id-ID', {
    day: 'numeric',
    month: 'long',
    year: 'numeric'
  })}`;

  return {
    eventName: kelasData.kompetisi.nama_event,
    categoryName: categoryName,
    location: kelasData.kompetisi.lokasi,
    dateRange: dateRange,
    totalParticipants: kelasData.peserta_kompetisi.filter((p: any) => p.status === 'APPROVED').length,
    matches: transformedMatches,
    leaderboard: leaderboard,
    totalRounds: matches.length > 0 ? Math.max(...matches.map((m: any) => m.ronde)) : 0,
    isPemula: isPemula,
    logoUrl: '/logo.png'
  };
};
