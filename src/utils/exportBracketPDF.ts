
import jsPDF from 'jspdf';
import domtoimage from 'dom-to-image-more';

// ==================== TYPES ====================
interface Participant {
  name: string;
  dojo: string;
  id: number;
}

interface MatchData {
  id: number;
  round: number;
  participant1?: Participant;
  participant2?: Participant;
  score1: number;
  score2: number;
  nomorPartai?: string;
  tanggal?: string;
  isBye?: boolean;
}

interface LeaderboardData {
  first: Participant | null;
  second: Participant | null;
  third: Participant[];
}

interface ExportConfig {
  eventName: string;
  categoryName: string;
  location: string;
  dateRange: string;
  totalParticipants: number;
  matches: MatchData[];
  leaderboard: LeaderboardData | null;
  totalRounds: number;
  isPemula?: boolean;
  logoUrl?: string; // Optional: URL for the event logo
}

// ==================== CONSTANTS ====================
const PAGE_WIDTH = 297;
const PAGE_HEIGHT = 210;
const MARGIN = 10;
const FOOTER_HEIGHT = 15;
const HEADER_HEIGHT = 20;
const CONTENT_WIDTH = PAGE_WIDTH - MARGIN * 2;
const CONTENT_HEIGHT = PAGE_HEIGHT - HEADER_HEIGHT - FOOTER_HEIGHT;

const THEME = {
  primary: '#990D35', // Maroon
  secondary: '#F5B700', // Gold
  background: '#F5FBEF', // Soft Beige/Green
  text: '#050505', // Almost Black
  gray: '#6B7280',
};

// ==================== PDF HELPER: Header & Footer ====================
const addHeaderAndFooter = (
  doc: jsPDF,
  config: ExportConfig,
  pageNumber: number,
  totalPages: number
) => {
  // Draw background for header and footer
  doc.setFillColor(THEME.background);
  doc.rect(0, 0, PAGE_WIDTH, HEADER_HEIGHT, 'F'); // Header background
  doc.rect(0, PAGE_HEIGHT - FOOTER_HEIGHT, PAGE_WIDTH, FOOTER_HEIGHT, 'F'); // Footer background

  // === HEADER ===
  // Logo
  if (config.logoUrl) {
    try {
      const img = new Image();
      img.src = config.logoUrl;
      doc.addImage(img, 'PNG', MARGIN, 5, 12, 12);
    } catch (e) {
      doc.setFont('helvetica', 'bold');
      doc.setFontSize(10);
      doc.setTextColor(THEME.primary);
      doc.text('SIGAP System', MARGIN, HEADER_HEIGHT / 2 + 3);
    }
  } else {
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(10);
    doc.setTextColor(THEME.primary);
    doc.text('SIGAP System', MARGIN, HEADER_HEIGHT / 2 + 3);
  }

  // Title
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(12);
  doc.setTextColor(THEME.text);
  doc.text(config.eventName, PAGE_WIDTH / 2, HEADER_HEIGHT / 2 - 1, { align: 'center' });
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(9);
  doc.setTextColor(THEME.gray);
  doc.text(config.categoryName, PAGE_WIDTH / 2, HEADER_HEIGHT / 2 + 5, { align: 'center' });

  // === FOOTER ===
  // Page number
  doc.setFontSize(8);
  doc.setTextColor(THEME.gray);
  const pageNumText = `Page ${pageNumber} of ${totalPages}`;
  doc.text(pageNumText, PAGE_WIDTH / 2, PAGE_HEIGHT - FOOTER_HEIGHT / 2 + 3, { align: 'center' });

  // Watermark
  const watermarkText = 'Generated by SIGAP System';
  doc.text(watermarkText, PAGE_WIDTH - MARGIN, PAGE_HEIGHT - FOOTER_HEIGHT / 2 + 3, { align: 'right' });
};

// ==================== PDF HELPER: Cover Page ====================
const addCoverPage = (doc: jsPDF, config: ExportConfig, totalPages: number) => {
  // Background
  doc.setFillColor(THEME.background);
  doc.rect(0, 0, PAGE_WIDTH, PAGE_HEIGHT, 'F');

  // Header Banner
  doc.setFillColor(THEME.primary);
  doc.rect(0, 0, PAGE_WIDTH, 40, 'F');

  // Title Highlight
  doc.setDrawColor(THEME.secondary);
  doc.setLineWidth(1.5);
  doc.roundedRect(MARGIN, 45, PAGE_WIDTH - MARGIN * 2, 30, 5, 5, 'S');

  // Title
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(32);
  doc.setTextColor(THEME.primary);
  doc.text(config.eventName, PAGE_WIDTH / 2, 60, { align: 'center' });

  doc.setFont('helvetica', 'normal');
  doc.setFontSize(16);
  doc.setTextColor(THEME.text);
  doc.text(config.categoryName, PAGE_WIDTH / 2, 70, { align: 'center' });

  // Info Box
  const boxY = 90;
  doc.setFillColor(255, 255, 255);
  doc.setDrawColor(229, 231, 235);
  doc.setLineWidth(0.5);
  doc.roundedRect(PAGE_WIDTH / 2 - 110, boxY, 220, 55, 3, 3, 'FD');

  doc.setFontSize(11);
  doc.setTextColor(THEME.text);
  const infoX = PAGE_WIDTH / 2 - 95;
  let infoY = boxY + 15;

  const infoItems = [
    { label: 'Location:', value: config.location },
    { label: 'Date:', value: config.dateRange },
    { label: 'Participants:', value: `${config.totalParticipants} Athletes` },
    { label: 'Total Matches:', value: `${config.matches.length} Matches` },
  ];

  infoItems.forEach(item => {
    doc.setFont('helvetica', 'bold');
    doc.text(item.label, infoX, infoY);
    doc.setFont('helvetica', 'normal');
    doc.text(item.value, infoX + 35, infoY);
    infoY += 10;
  });

  addHeaderAndFooter(doc, config, 1, totalPages);
};

// ==================== PDF HELPER: Add Image to Page ====================
const addImageToPage = async (
  doc: jsPDF,
  element: HTMLElement,
  config: ExportConfig
): Promise<number> => {
  const filter = (node: HTMLElement) => {
    return !node.classList?.contains('no-export');
  };

  // Create a clone to manipulate styles without affecting the original element
  const clonedElement = element.cloneNode(true) as HTMLElement;

  // Append to body to apply computed styles, but keep it invisible
  clonedElement.style.position = 'absolute';
  clonedElement.style.left = '-9999px';
  clonedElement.style.top = '0px';
  document.body.appendChild(clonedElement);

  // 'Bake' computed styles into inline styles to resolve unsupported color formats like oklch
  const originalElements = [element, ...Array.from(element.querySelectorAll('*'))];
  const clonedElements = [clonedElement, ...Array.from(clonedElement.querySelectorAll('*'))];

  clonedElements.forEach((clone, index) => {
    const original = originalElements[index] as HTMLElement;
    const style = window.getComputedStyle(original);
    const htmlClone = clone as HTMLElement;

    htmlClone.style.color = style.color;
    htmlClone.style.backgroundColor = style.backgroundColor;
    htmlClone.style.borderColor = style.borderColor;
    htmlClone.style.borderTopColor = style.borderTopColor;
    htmlClone.style.borderRightColor = style.borderRightColor;
    htmlClone.style.borderBottomColor = style.borderBottomColor;
    htmlClone.style.borderLeftColor = style.borderLeftColor;
  });

  const dataUrl = await domtoimage.toPng(clonedElement, {
    quality: 1,
    cacheBust: true,
    bgcolor: THEME.background,
    filter: filter,
    style: {
      fontFamily: "'Poppins', 'Helvetica Neue', sans-serif",
      '-webkit-font-smoothing': 'antialiased',
      color: THEME.text,
    }
  });

  // Clean up the cloned element from the DOM
  document.body.removeChild(clonedElement);

  const img = new Image();
  img.src = dataUrl;
  await new Promise(resolve => (img.onload = resolve));

  const imgWidth = CONTENT_WIDTH;
  const imgHeight = (img.height * imgWidth) / img.width;
  const totalPages = Math.ceil(imgHeight / CONTENT_HEIGHT);

  let heightLeft = imgHeight;
  let position = 0;

  for (let i = 0; i < totalPages; i++) {
    doc.addPage();
    const pageNumber = doc.internal.getNumberOfPages();

    // Page background
    doc.setFillColor(THEME.background);
    doc.rect(0, 0, PAGE_WIDTH, PAGE_HEIGHT, 'F');

    const y = HEADER_HEIGHT - position;
    doc.addImage(dataUrl, 'PNG', MARGIN, y, imgWidth, imgHeight);
    heightLeft -= CONTENT_HEIGHT;
    position += CONTENT_HEIGHT;

    addHeaderAndFooter(doc, config, pageNumber, 0); // Total pages will be updated later
  }

  return totalPages;
};

// ==================== MAIN EXPORT FUNCTION ====================
export const exportBracketToPDF = async (
  config: ExportConfig,
  bracketElement: HTMLElement,
  leaderboardElement?: HTMLElement
): Promise<void> => {
  try {
    const doc = new jsPDF({
      orientation: 'landscape',
      unit: 'mm',
      format: 'a4',
      compress: true,
    });

    // Temporarily remove the first blank page
    doc.deletePage(1);

    // Add elements and count pages
    let totalPages = 1; // Start with cover page
    const pageCounts = { bracket: 0, leaderboard: 0 };

    if (bracketElement) {
      // Add round labels to bracket before rendering
      const roundsContainer = document.createElement('div');
      roundsContainer.className = 'flex justify-around w-full px-4 mb-2 no-export';
      const roundLabels = ['Round 1', 'Round 2', 'Quarterfinal', 'Semifinal', 'Final'];
      for (let i = 0; i < config.totalRounds; i++) {
        const label = document.createElement('div');
        label.className = 'text-sm font-bold text-gray-600';
        label.innerText = roundLabels[i] || `Round ${i + 1}`;
        roundsContainer.appendChild(label);
      }
      bracketElement.prepend(roundsContainer);
      
      pageCounts.bracket = await addImageToPage(doc, bracketElement, config);
      totalPages += pageCounts.bracket;
      
      // Clean up added labels
      bracketElement.removeChild(roundsContainer);
    }

    if (leaderboardElement) {
      // Add emojis and styles to leaderboard before rendering
      const ranks = leaderboardElement.querySelectorAll('[data-rank]');
      const emojis = ['ðŸ¥‡', 'ðŸ¥ˆ', 'ðŸ¥‰'];
      const borders = ['border-yellow-400', 'border-gray-400', 'border-yellow-700'];
      ranks.forEach((rank, i) => {
        const nameEl = rank.querySelector('.font-bold');
        if(nameEl && i < 3) {
          nameEl.innerHTML = `${emojis[i]} ${nameEl.innerHTML}`;
          rank.classList.add(borders[i], 'border-2', 'shadow-lg');
        }
      });

      pageCounts.leaderboard = await addImageToPage(doc, leaderboardElement, config);
      totalPages += pageCounts.leaderboard;

      // Clean up emojis and styles
       ranks.forEach((rank, i) => {
        const nameEl = rank.querySelector('.font-bold');
        if(nameEl && i < 3) {
          nameEl.innerHTML = nameEl.innerHTML.replace(`${emojis[i]} `, '');
           rank.classList.remove(borders[i], 'border-2', 'shadow-lg');
        }
      });
    }

    // Add Cover Page at the beginning
    doc.insertPage(1);
    addCoverPage(doc, config, totalPages);

    // Update total pages in all footers
    for (let i = 1; i <= totalPages; i++) {
      doc.setPage(i);
      // Re-run footer logic to update total pages
      const currentPageNum = doc.internal.getCurrentPageInfo().pageNumber;
      addHeaderAndFooter(doc, config, currentPageNum, totalPages);
    }

    // Save PDF
    const sanitizedEventName = config.eventName.replace(/[^a-z0-9]/gi, '_').toLowerCase();
    const dateStr = new Date().toISOString().split('T')[0];
    const filename = `Bracket_${sanitizedEventName}_${config.categoryName.replace(/ /g, '_')}_${dateStr}.pdf`;

    doc.save(filename);

  } catch (error) {
    console.error('Error generating PDF:', error);
    alert('Failed to generate PDF. Please check the console for more details.');
  }
};

// ==================== TRANSFORM HELPER ====================
export const transformBracketDataForPDF = (
  kelasData: any,
  matches: any[],
  leaderboard: any,
  isPemula: boolean = false
): ExportConfig => {
  const transformedMatches: MatchData[] = matches.map(match => ({
    id: match.id_match,
    round: match.ronde,
    participant1: match.peserta_a ? {
      name: match.peserta_a.is_team
        ? match.peserta_a.anggota_tim?.map((t: any) => t.atlet.nama_atlet).join(', ') || 'Team'
        : match.peserta_a.atlet?.nama_atlet || '',
      dojo: match.peserta_a.atlet?.dojang.nama_dojang || '',
      id: match.peserta_a.id_peserta_kompetisi
    } : undefined,
    participant2: match.peserta_b ? {
      name: match.peserta_b.is_team
        ? match.peserta_b.anggota_tim?.map((t: any) => t.atlet.nama_atlet).join(', ') || 'Team'
        : match.peserta_b.atlet?.nama_atlet || '',
      dojo: match.peserta_b.atlet?.dojang.nama_dojang || '',
      id: match.peserta_b.id_peserta_kompetisi
    } : undefined,
    score1: match.skor_a || 0,
    score2: match.skor_b || 0,
    nomorPartai: match.nomor_partai,
    tanggal: match.tanggal_pertandingan,
    isBye: !match.peserta_b && match.ronde === 1
  }));

  const categoryName = `${kelasData.kelompok?.nama_kelompok || ''} ${
    kelasData.kelas_berat?.jenis_kelamin === 'LAKI_LAKI' ? 'Male' : 'Female'
  } ${kelasData.kelas_berat?.nama_kelas || kelasData.poomsae?.nama_kelas || ''}`.trim();

  const dateRange = `${new Date(kelasData.kompetisi.tanggal_mulai).toLocaleDateString('id-ID', {
    day: 'numeric',
    month: 'long',
    year: 'numeric'
  })} - ${new Date(kelasData.kompetisi.tanggal_selesai).toLocaleDateString('id-ID', {
    day: 'numeric',
    month: 'long',
    year: 'numeric'
  })}`;

  return {
    eventName: kelasData.kompetisi.nama_event,
    categoryName: categoryName,
    location: kelasData.kompetisi.lokasi,
    dateRange: dateRange,
    totalParticipants: kelasData.peserta_kompetisi.filter((p: any) => p.status === 'APPROVED').length,
    matches: transformedMatches,
    leaderboard: leaderboard,
    totalRounds: matches.length > 0 ? Math.max(...matches.map((m: any) => m.ronde)) : 0,
    isPemula: isPemula,
    logoUrl: '/logo.png' // Default logo path, adjust if needed
  };
};
